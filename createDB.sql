-- ************************************************** SqlDBM: PostgreSQL *************************************************
-- * Generated by SqlDBM: Widget project fork - using json to creating pricing strategy, v4 by george.schulz33@gmail.com *



-- ************************************** users

CREATE TABLE users
(
 user_id      serial NOT NULL,
 email        varchar(50) NOT NULL,
 password     varchar(50) NULL,
 renewal_date date NULL,
 cancel_date  date NULL,
 CONSTRAINT PK_users PRIMARY KEY ( user_id )
);








-- ************************************** pricing_strategies

CREATE TABLE pricing_strategies
(
 strategy_id     serial NOT NULL,
 starts_at       numeric NOT NULL,
 strategy_config json NOT NULL,
 type            varchar(255) NOT NULL,
 CONSTRAINT PK_strategies PRIMARY KEY ( strategy_id )
);








-- ************************************** widgets

CREATE TABLE widgets
(
 widget_id   uuid NOT NULL,
 user_id     int NOT NULL,
 strategy_id int NOT NULL,
 active      boolean NOT NULL,
 CONSTRAINT PK_widgets PRIMARY KEY ( widget_id ),
 CONSTRAINT FK_user_id_widgets FOREIGN KEY ( user_id ) REFERENCES users ( user_id ),
 CONSTRAINT FK_strategies_widgets FOREIGN KEY ( strategy_id ) REFERENCES pricing_strategies ( strategy_id )
);


-- ************************************** orders

CREATE TABLE orders
(
 order_id          serial NOT NULL,
 stripe_payment_id varchar(50) NOT NULL,
 user_id           int NOT NULL,
 amount            numeric NOT NULL,
 description       text NOT NULL,
 type              varchar(255) NOT NULL,
 billing_email     varchar(255) NOT NULL,
 CONSTRAINT PK_orders PRIMARY KEY ( order_id ),
 CONSTRAINT FK_9 FOREIGN KEY ( user_id ) REFERENCES users ( user_id )
);


-- ************************************** federated_credentials

CREATE TABLE federated_credentials
(
 credential_id integer NOT NULL,
 provider      varchar(255) NOT NULL,
 user_id       int NOT NULL,
 subject       varchar(255) NOT NULL,
 CONSTRAINT PK_credentials PRIMARY KEY ( credential_id ),
 CONSTRAINT FK_user_id FOREIGN KEY ( user_id ) REFERENCES users ( user_id )
);


-- ************************************** businesses

CREATE TABLE businesses
(
 business_id   serial NOT NULL,
 name          varchar(255) NOT NULL,
 user_id       int NOT NULL,
 phone         varchar(12) NOT NULL,
 hex_primary   varchar(6) NOT NULL,
 hex_secondary varchar(6) NOT NULL,
 CONSTRAINT PK_businesses PRIMARY KEY ( business_id ),
 CONSTRAINT FK_user_businesses FOREIGN KEY ( user_id ) REFERENCES users ( user_id )
);







-- ************************************** widget_details

CREATE TABLE widget_details
(
 widget_id         uuid NOT NULL,
 program           varchar(255) NOT NULL,
 short_description text NOT NULL,
 frequency         varchar(50) NOT NULL,
 billing_frequency varchar(50) NOT NULL,
 cover_image_url   varchar(255) NOT NULL,
 CONSTRAINT FK_widget_details_widget FOREIGN KEY ( widget_id ) REFERENCES widgets ( widget_id )
);






-- ************************************** targets

CREATE TABLE targets
(
 target_id serial NOT NULL,
 weight    integer NULL,
 widget_id uuid NOT NULL,
 name      varchar(50) NOT NULL,
 CONSTRAINT PK_targets PRIMARY KEY ( target_id ),
 CONSTRAINT FK_8 FOREIGN KEY ( widget_id ) REFERENCES widgets ( widget_id )
);







-- ************************************** responses

CREATE TABLE responses
(
 response_id serial NOT NULL,
 widget_id   uuid NOT NULL,
 signed_up   boolean NOT NULL,
 CONSTRAINT PK_responses PRIMARY KEY ( response_id ),
 CONSTRAINT FK_widget_responses FOREIGN KEY ( widget_id ) REFERENCES widgets ( widget_id )
);

CREATE INDEX FK_1 ON responses
(
 widget_id
);








-- ************************************** proposal_templates

CREATE TABLE proposal_templates
(
 proposal_template_id serial NOT NULL,
 legal                text NOT NULL,
 widget_id            uuid NOT NULL,
 CONSTRAINT PK_proposal_templates PRIMARY KEY ( proposal_template_id ),
 CONSTRAINT FK_4 FOREIGN KEY ( widget_id ) REFERENCES widgets ( widget_id )
);








-- ************************************** benefits

CREATE TABLE benefits
(
 benefit_id serial NOT NULL,
 text       text NOT NULL,
 widget_id  uuid NOT NULL,
 CONSTRAINT PK_benefits PRIMARY KEY ( benefit_id ),
 CONSTRAINT FK_7 FOREIGN KEY ( widget_id ) REFERENCES widgets ( widget_id )
);









-- ************************************** responses_contacts

CREATE TABLE responses_contacts
(
 contact_id  serial NOT NULL,
 response_id int NOT NULL,
 name        varchar(255) NOT NULL,
 phone       varchar(255) NOT NULL,
 email       varchar(255) NOT NULL,
 CONSTRAINT PK_responses_contacts PRIMARY KEY ( contact_id ),
 CONSTRAINT FK_14_1 FOREIGN KEY ( response_id ) REFERENCES responses ( response_id )
);








-- ************************************** proposals

CREATE TABLE proposals
(
 proposal_id          uuid NOT NULL,
 did_agree            boolean NOT NULL,
 response_id          int NOT NULL,
 proposal_template_id int NOT NULL,
 setup                numeric NOT NULL,
 recurring_price      numeric NOT NULL,
 description          text NOT NULL,
 legal                text NOT NULL,
 user_ip              varchar(50) NULL,
 CONSTRAINT PK_proposals PRIMARY KEY ( proposal_id ),
 CONSTRAINT FK_12 FOREIGN KEY ( proposal_template_id ) REFERENCES proposal_templates ( proposal_template_id ),
 CONSTRAINT FK_13 FOREIGN KEY ( response_id ) REFERENCES responses ( response_id )
);







-- ************************************** highlighted_features

CREATE TABLE highlighted_features
(
 feature_id           serial NOT NULL,
 text                 text NOT NULL,
 proposal_template_id int NOT NULL,
 is_included          boolean NOT NULL,
 CONSTRAINT PK_highlighted_features PRIMARY KEY ( feature_id ),
 CONSTRAINT FK_5 FOREIGN KEY ( proposal_template_id ) REFERENCES proposal_templates ( proposal_template_id )
);





-- ************************************** proposal_features

CREATE TABLE proposal_features
(
 feature_id           serial NOT NULL,
 text                 text NOT NULL,
 proposal_id          uuid NOT NULL,
 proposal_template_id int NOT NULL,
 is_included          boolean NOT NULL,
 CONSTRAINT PK_proposal_features PRIMARY KEY ( feature_id ),
 CONSTRAINT FK_14 FOREIGN KEY ( proposal_id ) REFERENCES proposals ( proposal_id )
);




